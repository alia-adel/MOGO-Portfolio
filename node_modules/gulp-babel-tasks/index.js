//region Imports
var $ = require('gulp-load-plugins')()
var eslint = $.eslint
var babel = $.babel
var gutil = $.util
//var logger = $.logger
var changed = $.changed
var gulpif = $.if
var jeditor = $.jsonEditor
var conflict = $.conflict
var mocha = $.mocha
var ignore = $.ignore
var nodemon = $.nodemon
//var gulphelp = $.help
var through = require('through2')
var del = require('del')
var path = require('path')
var _ = require('lodash')
var fs = require('fs')
//endregion

function onChange(evt) {
  gutil.log('---')
  gutil.log('File changed:', gutil.colors.red(evt.path))
}

module.exports = function(gulp, opts) {

  // TODO(vjpr): Wait for gulp4 descriptions.
  //gulphelp(gulp)

  // TODO(vjpr): Extract common `src/dist` paths.
  opts = opts || {}
  opts = _.defaults(opts, {
    srcGlob: 'src/**/*.js',
    testsGlob: 'src/**/__tests__/**/*-test.js',
    testsDistGlob: 'dist/**/__tests__/**/*-test.js', // Transpiled tests.
    destDir: 'dist',
    destGlob: 'dist/**/*',
    eslint: {configFile: path.join(__dirname, './eslintrc.json')},
    mocha: {
      require: ['babel/register', './src/__tests__/bootstrap.js'],
      //reporter: 'nyan',
    },
    // `test-watch` depends on this being set.
    shouldCompileTests: true,
  })

  // State.
  var state = {
    // Only transpile files which have changed.
    watch: false
  }

  //////////////////////////////////////////////////////////////////////////////
  // Helpers
  //////////////////////////////////////////////////////////////////////////////

  // Babel logging.
  function logFileHelpers() {
    return through.obj(function(file, enc, cb) {
      var src = file.history[0]
      var dest = file.history[1]

      function relPath(f) { return path.relative('.', f) }

      gutil.log('Compiling (Babel):', gutil.colors.red(relPath(src) + ' -> ' + relPath(dest)))
      //gutil.log(file.babel.usedHelpers)
      cb(null, file)
    })
  }

  //////////////////////////////////////////////////////////////////////////////
  // Lint
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('lint', function() {
    return gulp.src(opts.srcGlob).pipe(eslint(opts.eslint)).pipe(eslint.format()).pipe(eslint.failOnError())
  })

  //////////////////////////////////////////////////////////////////////////////
  // Watch
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('watch', function() {
    // Used by `compile` task to check whether we should only compile changed files.
    state.watch = true
    gulp.watch(opts.srcGlob, ['compile']).on('change', onChange)
  })

  //////////////////////////////////////////////////////////////////////////////
  // Build
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('build', ['compile', 'clean'], function() {

  })

  //////////////////////////////////////////////////////////////////////////////
  // Compile
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('compile', function() {
    //var loggerOpts = {
    //  before: 'Starting Babel...',
    //  after: 'Babel complete!',
    //  showChange: true,
    //}
    return gulp.src(opts.srcGlob)
      .pipe(gulpif(state.watch, changed(opts.destDir)))
      .pipe(gulpif(!opts.shouldCompileTests, ignore.exclude(opts.testsGlob)))
      .pipe(babel())
      //.pipe(logger(loggerOpts))
      .pipe(gulp.dest(opts.destDir))
      .pipe(logFileHelpers())
  })

  //////////////////////////////////////////////////////////////////////////////
  // Clean
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('clean', function() {
    gutil.log('Cleaning:', gutil.colors.red(opts.destDir))
    return del(opts.destGlob)
  })

  //////////////////////////////////////////////////////////////////////////////
  // build-test-lint
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('build-test-lint', ['build', 'test', 'lint'])

  //////////////////////////////////////////////////////////////////////////////
  // Test
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('test', function() {
    return gulp.src(opts.testsGlob, {read: false})
      .pipe(mocha(opts.mocha))
  })

  // Faster: Run tests on transpiled files so no need for slow babel/require.
  gulp.task('test-transpiled', ['compile'], function() {

    if (!opts.shouldCompileTests) throw 'shouldCompileTests must be enabled for test-transpiled task'

    // TODO(vjpr): Should we clone first?
    opts.mocha.require = _.without(opts.mocha.require, 'babel/register')
    return gulp.src(opts.testsDistGlob, {read: false})
      .pipe(mocha(opts.mocha))

  })

  //////////////////////////////////////////////////////////////////////////////
  // Watch tests
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('test-watch', ['test-transpiled'], function() {
    state.watch = true
    return gulp.watch(opts.srcGlob, ['test-transpiled', 'compile']).on('change', onChange)
  })

  //////////////////////////////////////////////////////////////////////////////
  // Git Prepush
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('prepush', ['build-test-lint'])

  //////////////////////////////////////////////////////////////////////////////
  // Prepublish
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('prepublish', ['build-test-lint'])

  //////////////////////////////////////////////////////////////////////////////
  // Bootstrap a module
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('bootstrap-copy-files', function() {
    gulp.src(path.join(__dirname, 'bootstrap', '**/*'), {dot: true})
      .pipe(conflict(process.cwd()))
      .pipe(gulp.dest(process.cwd()))
  })

  gulp.task('bootstrap-pjson', function() {

    // TODO(vjpr): Use jsondiff to show differences and provide a confirm prompt.
    var pjsonPath = path.join(process.cwd(), 'package.json')
    gulp.src(pjsonPath).pipe(jeditor(function(json) {
      _.set(json, 'scripts.prepublish', 'gulp prepublish')
      _.set(json, 'scripts.test', 'gulp test')
      _.set(json, 'main', 'dist/index.js')
      _.set(json, 'license', 'MIT')

      ////////////////
      // For `pre-git` module.
      _.set(json, 'pre-commit', 'gulp lint')
      _.set(json, 'post-commit', 'git status')
      _.set(json, 'pre-push', [

        // This might be too slow for some modules.
        //'rimraf node_modules',
        //'npm install',

        // This might be too slow also as we use `cut-release` which
        // would mean it would run twice.
        //'gulp prepush',

      ])
      ////////////////

      console.log('New package.json file:')
      console.log(JSON.stringify(json, false, 2))
      return json
    })).pipe(gulp.dest('.'))

  })

  gulp.task('bootstrap', ['bootstrap-pjson', 'bootstrap-copy-files'])

  //////////////////////////////////////////////////////////////////////////////
  // Nodemon
  //////////////////////////////////////////////////////////////////////////////

  gulp.task('nodemon', function() {
    nodemon({
      script: 'dist/index.js',
      ext: 'js',
      env: {
        'NODE_ENV': 'development'
      },
    })
      .on('start', ['watch'])
      .on('change', ['watch'])
      .on('restart', function() {
        console.log('restarted!');
      });
  })

  //////////////////////////////////////////////////////////////////////////////
  // Default
  //////////////////////////////////////////////////////////////////////////////

  //gulp.task('default', ['watch', 'build'])

}
